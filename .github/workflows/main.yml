name: Notify Release

on:
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Fetch Repository Tags by Date and Time
        id: fetch_tags
        run: |
          curl -s "https://api.github.com/repos/frostnova721/animestream/tags" -o tags.json
          TAGS=$(jq -r '.[].name' tags.json)
          declare -a TAGS_WITH_DATES=()
          for TAG in $TAGS; do
            TAG_DETAILS=$(curl -s "https://api.github.com/repos/${{github.repository}}/git/refs/tags/$TAG")
            OBJECT_URL=$(echo "$TAG_DETAILS" | jq -r '.object.url // empty')
            if [ -n "$OBJECT_URL" ]; then
              OBJECT_DETAILS=$(curl -s "$OBJECT_URL")
              DATE=$(echo "$OBJECT_DETAILS" | jq -r '.tagger.date // .committer.date // empty')
              if [ -n "$DATE" ]; then
                TAGS_WITH_DATES+=("$DATE $TAG")
              fi
            fi
          done
          LATEST_TAG=""
          LATEST_DATE=""
          for TAG_DATE in "${TAGS_WITH_DATES[@]}"; do
            TAG_DATE_TIME=$(echo "$TAG_DATE" | awk '{print $1}')
            TAG_NAME=$(echo "$TAG_DATE" | awk '{print $2}')
            if [[ -z "$LATEST_DATE" || "$TAG_DATE_TIME" > "$LATEST_DATE" ]]; then
              LATEST_DATE="$TAG_DATE_TIME"
              LATEST_TAG="$TAG_NAME"
            fi
          done
          echo "$LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
      - name: Get Latest Release Notes
        id: get_release_notes
        run: |
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.LATEST_TAG }}")

          RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r '.body')
          echo "Release Notes: $RELEASE_NOTES"

          # Write to file to handle multiline content safely
          echo "$RELEASE_NOTES" > release_notes.txt

      - name: Format Release Notes
        id: format_notes
        run: |
          # Clean || markers and any HTML tags
          sed 's/||//g' release_notes.txt | sed 's/<br>//g' > clean_release_notes.txt
          echo "" > formatted_notes.txt
          
          extract_section() {
            local title="$1"
            local emoji="$2"
            local pattern="$3"
            
            # Find the section start
            local start=$(grep -n -i "^## $pattern" clean_release_notes.txt | head -n1 | cut -d: -f1)
            if [ -z "$start" ]; then return; fi
            
            # Find the next section or end of file
            local next=$(tail -n +$((start + 1)) clean_release_notes.txt | grep -n '^##' | head -n1 | cut -d: -f1)
            
            if [ -z "$next" ]; then
              # No next section found, go to end of file
              content=$(tail -n +$((start + 1)) clean_release_notes.txt | grep '^-' | head -n 10)
            else
              # Extract content between sections
              end=$((start + next - 1))
              content=$(sed -n "$((start + 1)),$((end - 1))p" clean_release_notes.txt | grep '^-' | head -n 10)
            fi
            
            # Only add section if there's content
            if [ -n "$content" ]; then
              echo "### $emoji $title" >> formatted_notes.txt
              echo "$content" >> formatted_notes.txt
              echo "" >> formatted_notes.txt
            fi
          }
          
          # Extract version info from the top
          version_info=$(head -n 5 clean_release_notes.txt | grep -E "(Changelog|update|v[0-9])" | head -n2)
          if [ -n "$version_info" ]; then
            echo "$version_info" >> formatted_notes.txt
            echo "" >> formatted_notes.txt
          fi
          
          # Extract sections with flexible patterns
          extract_section "New Features" "üåü" "What's new"
          extract_section "Bug Fixes" "üîß" "Fixes"
          extract_section "Improvements" "‚ö°" "Improvements"
          extract_section "Changes" "üîÑ" "Changes"
          
          # Add a footer note if there's additional content
          footer_note=$(grep -i "thanks\|support\|love" clean_release_notes.txt | tail -n1)
          if [ -n "$footer_note" ]; then
            echo "---" >> formatted_notes.txt
            echo "$footer_note" >> formatted_notes.txt
          fi
          
          # Set environment variable for use in subsequent steps
          echo "FORMATTED_NOTES<<EOF" >> $GITHUB_ENV
          cat formatted_notes.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "Preview of formatted notes:"
          cat formatted_notes.txt

      - name: Get and Categorize Assets with Sizes
        id: categorize_assets
        run: |
          # Fetch release assets based on the latest tag
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           -H "Accept: application/vnd.github.v3+json" \
           "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.LATEST_TAG }}" -o release.json
          
          # Initialize environment variables
          for VAR in apk_arm64 apk_armeabi apk_universal apk_x86_64 windows linux ios setup macos linuximg linuxrmp; do
            echo "${VAR}_message=" >> $GITHUB_ENV
          done
          
          # Process each asset
          jq -r '.assets[] | "\(.browser_download_url) \(.size)"' release.json | while read -r LINE; do
            ASSET_URL=$(echo "$LINE" | awk '{print $1}')
            ASSET_SIZE=$(echo "$LINE" | awk '{print $2}')
            SIZE_HR=$(awk -v size="$ASSET_SIZE" 'BEGIN{
              split("B KB MB GB TB", unit);
              for (i=1; size>=1024 && i<5; i++) size/=1024;
              printf "%.2f %s", size, unit[i]
            }')
            FILE_NAME=$(basename "$ASSET_URL")
            
            # Categorize and set variables
            if [[ "$FILE_NAME" == *"-.apk" ]]; then
              echo "apk_universal_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"Installer.exe" ]]; then
              echo "setup_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            fi
          done
        

      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ env.DISCORD_WEBHOOK_URL }}
        run: |
          FORMATTED_NOTES_CLEAN=$(echo "$FORMATTED_NOTES" | sed -E 's/\): [^:]+:/) :/g')
          
          # Mention the role based on the release name
          if [[ "${{ env.LATEST_TAG }}" == *alpha* ]]; then
            role_mention="<@&1313089691523878942>"  # Role ID for alpha channel
          elif [[ "${{ env.LATEST_TAG }}" == *beta* ]]; then
            role_mention="<@&1313087262539518033>"  # Role ID for beta channel
          else
            role_mention="<@&1313346791479054456>"  # Default role ID
          fi
        
          default_color="#1ac4c5"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }
          embed_color=$(hex_to_decimal "$default_color")

          # Ensure VERSION is not empty
          VERSION=${VERSION:-"${{env.LATEST_TAG}}"}
      
          discord_data=$(jq -nc \
                        --arg role_mention "$role_mention" \
                        --arg field_value "$FORMATTED_NOTES_CLEAN

            [‚ùìDon't know which version to download? Click here!](https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md)  
            
            [üìå Full changelog](https://github.com/${{ github.repository }}/releases/tag/${{ env.LATEST_TAG }})" \
                        --arg footer_text "Version $VERSION" \
                        --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                        --argjson embed_color "$embed_color" \
                        '{
                          "content": $role_mention,
                          "embeds": [
                            {
                              "title": "üöÄ New Release: ${{env.LATEST_TAG}}",
                              "color": $embed_color,
                              "description": $field_value,
                              "footer": {
                                "text": $footer_text
                              },
                              "timestamp": $timestamp
                            }
                          ]
                        }')

          echo "Debug: Final Discord payload is: $discord_data"

          # Send the message to Discord using the webhook
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "$discord_data" \
              "$DISCORD_WEBHOOK_URL"

      - name: Send Assets to Discord
        run: |
          MESSAGE="${{ env.LATEST_TAG }} Released
            üîπ ${{ env.apk_universal_message }} | **APK (universal)**
            üîπ ${{ env.setup_message }} | **Windows EXE**
          PAYLOAD=$(jq -n --arg content "$MESSAGE" '{ content: $content }')
          curl -X POST "${{ env.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
